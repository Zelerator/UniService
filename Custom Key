-- Create the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HelloGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the Frame
local frame = Instance.new("Frame")
frame.Name = "MainFrame"
frame.Size = UDim2.new(0.4, 0, 0.2, 0) -- Mid size
frame.Position = UDim2.new(0.3, 0, 0.4, 0) -- Center
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Parent = screenGui

-- Create the TextLabel
local label = Instance.new("TextLabel")
label.Text = "If you see this, you won't need key system."
label.Font = Enum.Font.SourceSansBold
label.TextSize = 36
label.TextColor3 = Color3.new(1, 1, 1)
label.BackgroundTransparency = 1
label.Size = UDim2.new(1, 0, 1, 0)
label.Position = UDim2.new(0, 0, 0, 0)
label.Parent = frame

-- Create Close Button
local closeBtn = Instance.new("TextButton")
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.TextSize = 20
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
closeBtn.Size = UDim2.new(0, 30, 0, 30)
closeBtn.Position = UDim2.new(1, -35, 0, 5)
closeBtn.Parent = frame

-- Close on button click
closeBtn.MouseButton1Click:Connect(function()
	frame:Destroy()
end)

-- Auto-close after 3 seconds
task.delay(3, function()
	if frame and frame.Parent then
		frame:Destroy()
	end
end)

task.wait()
print("Script Running")
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Zelerator/ASKID/refs/heads/main/ASAIYAUI'))()

local Window = Rayfield:CreateWindow({
    Name = "Asaiya Script for No limit and Lifting Simulator",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Script for NLLS",
    LoadingSubtitle = "Made by Asaiya",
    Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = Asaiya, -- Create a custom folder for your hub/game
       FileName = "Asaiya Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "https://discord.gg/mkjfWXDjBu", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Key System",
       Subtitle = "Need key to open the script",
       Note = "Join my Discord to get the Key \nhttps://discord.gg/A2mNjt4BAY", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"getfucked","0"}
        
    }
 })

 Rayfield:Notify({
    Title = "Thanks for Using My Script!",
    Content = "Join our discord server to request features!",
    Duration = 3.5,
    Image = 4483362458,
 })

 local MainTab = Window:CreateTab(" Automatics", nil)
 local BloodTab = Window:CreateTab("[Old!] Bloodline & sland", nil)
 local TryTab = Window:CreateTab("[New!] Bloodline & Island", nil)
 local PlayerTab = Window:CreateTab("Players", nil)
 local SetTab = Window:CreateTab("Settings", nil)
 local MiscTab = Window:CreateTab("✅Information✅", nil)
 local player = game.Players.LocalPlayer
local Toggle = MainTab:CreateToggle({
    Name = "Gain Muscle + Sell If Full Storage (Normal Speed)",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            print("✅ Auto-Sell & Gain Muscle Enabled")
            _G.AutoSell = true
            _G.GainMuscle = true

            local replicatedStorage = game:GetService("ReplicatedStorage")
            local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
            local player = game:GetService("Players").LocalPlayer
            local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle") -- Change "Muscle" if needed

            local muscleHistory = {} -- Store the last 5 seconds of muscle values
            local historyLength = 3 -- Track the last 5 values (1 per second)

            -- Muscle Gaining Loop
            spawn(function()
                while _G.GainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    remoteEvent:FireServer(unpack(args))
                    task.wait(0.7) -- Gains muscle every 0.4 seconds
                end
            end)

            -- Auto-Sell Loop
            spawn(function()
                while _G.AutoSell do
                    task.wait(1) -- Check every 1 second

                    if muscleStat then
                        -- Add current muscle value to history
                        table.insert(muscleHistory, muscleStat.Value)
                        if #muscleHistory > historyLength then
                            table.remove(muscleHistory, 1) -- Keep history at 5 values max
                        end

                        -- Check if all stored values are the same
                        local allSame = true
                        for i = 2, #muscleHistory do
                            if muscleHistory[i] ~= muscleHistory[i - 1] then
                                allSame = false
                                break
                            end
                        end

                        if allSame and #muscleHistory >= historyLength then
                            -- No muscle gain for 5 seconds, sell!
                            print("⚡ No muscle gain detected for 5 seconds. Selling...")
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            remoteEvent:FireServer(unpack(args))

                            -- Clear history after selling
                            muscleHistory = {}
                        end
                    else
                        print("❌ Muscle stat not found! Make sure the stat name is correct.")
                    end
                end
            end)
        else
            print("❌ Auto-Sell & Gain Muscle Disabled")
            _G.AutoSell = false
            _G.GainMuscle = false
        end
    end,
})

local Toggle = MainTab:CreateToggle({
    Name = "Gain Muscle + Sell If Full Storage (Fast Lifter Gamepass)",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        if Value then
            print("✅ Auto-Sell & Gain Muscle Enabled")
            _G.AutoSell = true
            _G.GainMuscle = true

            local replicatedStorage = game:GetService("ReplicatedStorage")
            local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
            local player = game:GetService("Players").LocalPlayer
            local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle") -- Change "Muscle" if needed

            local muscleHistory = {} -- Store the last 5 seconds of muscle values
            local historyLength = 3 -- Track the last 5 values (1 per second)

            -- Muscle Gaining Loop
            spawn(function()
                while _G.GainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    remoteEvent:FireServer(unpack(args))
                    task.wait(0.43) -- Gains muscle every 0.4 seconds
                end
            end)

            -- Auto-Sell Loop
            spawn(function()
                while _G.AutoSell do
                    task.wait(1) -- Check every 1 second

                    if muscleStat then
                        -- Add current muscle value to history
                        table.insert(muscleHistory, muscleStat.Value)
                        if #muscleHistory > historyLength then
                            table.remove(muscleHistory, 1) -- Keep history at 5 values max
                        end

                        -- Check if all stored values are the same
                        local allSame = true
                        for i = 2, #muscleHistory do
                            if muscleHistory[i] ~= muscleHistory[i - 1] then
                                allSame = false
                                break
                            end
                        end

                        if allSame and #muscleHistory >= historyLength then
                            -- No muscle gain for 5 seconds, sell!
                            print("⚡ No muscle gain detected for 5 seconds. Selling...")
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            remoteEvent:FireServer(unpack(args))

                            -- Clear history after selling
                            muscleHistory = {}
                        end
                    else
                        print("❌ Muscle stat not found! Make sure the stat name is correct.")
                    end
                end
            end)
        else
            print("❌ Auto-Sell & Gain Muscle Disabled")
            _G.AutoSell = false
            _G.GainMuscle = false
        end
    end,
})



 

local selectedMode = "None"

local Dropdown = MainTab:CreateDropdown({
    Name = "Choose Gain Muscle (30+ FPS MINIMUM)",
    Options = {
        "None",
        "Gain Muscle (Fast Lifter Gamepass, No RollBack & Safe)",
        "Gain Muscle (No Gamepass)",
        "Gain Muscle (Fast Lifter Gamepass, Ridiculously fast & Unsafe)"
    },
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        -- Stop any existing loop before starting a new one
        getgenv().gain = false
        selectedMode = Option[1] -- Store the selected option
        
        -- Small wait to ensure previous loop stops completely
        task.wait(0.1)

        if selectedMode ~= "None" then
            getgenv().gain = true
            task.spawn(function()
                while getgenv().gain do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

                    -- Apply the correct wait time based on selection
                    if selectedMode == "Gain Muscle (No Gamepass)" then
                        task.wait(0.7)
                    elseif selectedMode == "Gain Muscle (Fast Lifter Gamepass, Ridiculously fast & Unsafe)" then
                        task.wait() -- No delay (instant execution)
                    elseif selectedMode == "Gain Muscle (Fast Lifter Gamepass, No RollBack & Safe)" then
                        task.wait(0.4)
                    end
                end
            end)
        end
    end
})


local selectedSellMode = "None"
        
local Dropdown = MainTab:CreateDropdown({
    Name = "Auto Sell Muscle",
    Options = {
        "None",
        "Instant",
        "Every 1 Second",
        "Every 3 Seconds",
        "Every 5 Seconds",
        "Every 10 Seconds",
        "Every 15 Seconds",
        "Every 30 Seconds",
        "Every 60 Seconds",
        "Every 5 Minutes",
        "Every 1 Hour",
        "Sell If Full"  -- Added the new option here
    },
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown2",
    Callback = function(Option)
        getgenv().Sell = false
        _G.AutoSell = false
        _G.GainMuscle = false
        selectedSellMode = Option[1] 

        task.wait(0.1)

        if selectedSellMode ~= "None" then
            if selectedSellMode == "Sell If Full" then
                -- Handle Sell If Full mode
                _G.AutoSell = true
                _G.GainMuscle = true
                print("✅ Auto-Sell & Gain Muscle (Sell If Full) Enabled")
                
                local replicatedStorage = game:GetService("ReplicatedStorage")
                local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
                local player = game:GetService("Players").LocalPlayer
                local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle") -- Change "Muscle" if needed

                local muscleHistory = {} -- Store the last 5 seconds of muscle values
                local historyLength = 3 -- Track the last 5 values (1 per second)

                -- Muscle Gaining Loop
                spawn(function()
                    while _G.GainMuscle do
                        local args = {
                            [1] = {
                                [1] = "GainMuscle"
                            }
                        }
                        remoteEvent:FireServer(unpack(args))
                        task.wait(15) -- Gains muscle every 0.4 seconds
                    end
                end)

                -- Auto-Sell Loop
                spawn(function()
                    while _G.AutoSell do
                        task.wait(1) -- Check every 1 second

                        if muscleStat then
                            -- Add current muscle value to history
                            table.insert(muscleHistory, muscleStat.Value)
                            if #muscleHistory > historyLength then
                                table.remove(muscleHistory, 1) -- Keep history at 5 values max
                            end

                            -- Check if all stored values are the same
                            local allSame = true
                            for i = 2, #muscleHistory do
                                if muscleHistory[i] ~= muscleHistory[i - 1] then
                                    allSame = false
                                    break
                                end
                            end

                            if allSame and #muscleHistory >= historyLength then
                                -- No muscle gain for 5 seconds, sell!
                                print("⚡ No muscle gain detected for 5 seconds. Selling...")
                                local args = {
                                    [1] = {
                                        [1] = "SellMuscle"
                                    }
                                }
                                remoteEvent:FireServer(unpack(args))

                                -- Clear history after selling
                                muscleHistory = {}
                            end
                        else
                            print("❌ Muscle stat not found! Make sure the stat name is correct.")
                        end
                    end
                end)
            else
                -- Handle all other timer-based sell modes
                getgenv().Sell = true
                task.spawn(function()
                    local lastSellTime = tick() -- Get the current time
                    local interval = 0
                    if     selectedSellMode == "Instant" then
                        interval = 0
                    elseif selectedSellMode == "Every 1 Second" then
                        interval = 1
                    elseif selectedSellMode == "Every 3 Seconds" then
                        interval = 3
                    elseif selectedSellMode == "Every 5 Seconds" then
                        interval = 5
                    elseif selectedSellMode == "Every 10 Seconds" then 
                        interval = 10
                    elseif selectedSellMode == "Every 15 Seconds" then 
                        interval = 15
                    elseif selectedSellMode == "Every 30 Seconds" then
                        interval = 30
                    elseif selectedSellMode == "Every 60 Seconds" then
                        interval = 60
                    elseif selectedSellMode == "Every 5 Minutes" then
                        interval = 300
                    elseif selectedSellMode == "Every 1 Hour" then
                        interval = 3600
                    end

                    while getgenv().Sell do
                        if tick() - lastSellTime >= interval then
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                            lastSellTime = tick() -- Reset timer after selling
                        end
                        task.wait(0.1) -- Small wait to prevent unnecessary CPU usage
                    end
                end)
            end
        end
    end
})


local Toggle = MainTab:CreateToggle({
    Name = "Auto buy Weight",
    CurrentValue = false,
    Flag = "Toggle4",
    Callback = function(Value)
        getgenv().BuyWeight = Value
        while getgenv().BuyWeight do
            -- Get the player's backpack
            local player = game.Players.LocalPlayer
            local backpack = player.Backpack

            -- Define the weight progression
            local weightOrder = {
                "Pencil", "Stick", "Mouse", "Water", "Soccer Ball", "Bottle", "Textbook",
                "Bucket", "Wood", "Guitar", "Unavailable", "Chair", "Cart", "TV", 
                "Bicycle", "Desk", "Bed", "Log", "Canoe", "Tyre", "Refrigerator", "Drum",
                "Hydrant", "Piano", "Motorcycle", "Safe", "Flag", "ATM", "RX-7", "EVO",
                "G-CLASS", "Van", "Tree", "Container", "Sailboat", "Bus", "Truck", "Windmill",
                "Jet", "Tank", "Transport Helicopter", "Battleship", "Spaceship", "Speaker",
                "Anchor", "Old House", "Building", "Toxic Tank", "Rocket", "Castle",
                "Torpedo", "Signal Tower", "Stone Altar", "UFO", "Ancient Place", "Pyramid",
                "Canyon Mt.", "Mountain", "Volcano", "Mt. Fuji", "Meteorite", "Moon",
                "Mercury", "Mars", "Saturn", "Jupiter", "SUPER Saturn", "Sedna Bar", "Sun",
                "Mini Galaxy", "Earth Bar", "Black Hole", "Four Dimensions", "Sun Bar", 
                "Holy Star", "Meteoroids Ring", "Meteor Bar", "Water Sphere", "SUPER Meteorite",
                "Cross Stars", "Fiery Star", "SUPER Venus", "Atomic Suns", "Lightning Cube",
                "Atmosphere", "Five Dimensions", "Space Stone", "Universe", "Mind Stone",
                "Reality Stone", "Soul Stone", "Time Stone", "Power Stone", "Cosmo Bar",
                "Galaxy Bar", "Universe Bar", "Sharkupiter", "Giftune", "Aurora Way", "Eternity",
                "Cashensione", "Past", "Future", "Infection", "Mutation", "Godly 1st Class",
                "Godly 2nd Class", "Godly 3rd Class", "Godly 4th Class", "Godly 5th Class",
                "Godly 6th Class", "Godly 7th Class", "Godly 8th Class", "Godly 9th Class", 
                "1ST SUPER CLASS", "2ND SUPER CLASS", "3RD SUPER CLASS", "4TH SUPER CLASS",
                "5TH SUPER CLASS", "6TH SUPER CLASS", "7TH SUPER CLASS", " 8TH SUPER CLASS",
                "9TH SUPER CLASS", "10TH SUPER CLASS", "11TH SUPER CLASS", "ULTIMATE 1ST CLASS",
                "ULTIMATE 2ND CLASS", "ULTIMATE 3RD CLASS", "ULTIMATE 4TH CLASS", 
                "ULTIMATE 5TH CLASS", "ULTIMATE 6TH CLASS", "ULTIMATE 7TH CLASS", 
                "ULTIMATE 8TH CLASS", "ULTIMATE 9TH CLASS", "ULTIMATE SUPER CLASS"
            }

            -- Find the highest weight the player has
            local highestWeightIndex = 0
            for i, weightName in ipairs(weightOrder) do
                if backpack:FindFirstChild(weightName) then
                    highestWeightIndex = i
                end
            end

            -- Determine the next weight to buy
            local nextWeightIndex = highestWeightIndex + 1

            -- Skip "Unavailable" entry
            while weightOrder[nextWeightIndex] == "Unavailable" do
                nextWeightIndex = nextWeightIndex + 1
            end

            if nextWeightIndex > #weightOrder then
                print("Player has all weights!")
                return
            end

            -- Buy the next weight
            print("Attempting to buy weight index: ", nextWeightIndex)
            local args = {
                [1] = {"BuyItem", "Income_Item", "Weight", nextWeightIndex}
            }
            game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

            task.wait(1) -- Adjust delay as needed
        end
    end
})
 

 local ReplicatedStorage = game:GetService("ReplicatedStorage")

 local Toggle = MainTab:CreateToggle({
    Name = "Auto Body Alter",
    CurrentValue = false,
    Flag = "Toggle5", 
    Callback = function(Value)
        getgenv().BuyAlter = Value

        while getgenv().BuyAlter do
            for i = 1, 30 do
                if not getgenv().BuyAlter then break end -- Exit loop if toggle is off

                local args = {
                    [1] = {
                        [1] = "BuyItem",
                        [2] = "Rebirth_Item",
                        [3] = "Rebirth1",
                        [4] = i
                    }
                }

                ReplicatedStorage:WaitForChild("RemoteEvent"):FireServer(unpack(args))
                wait(0.1) -- Prevents excessive requests
            end
            wait(5) -- Delay to prevent spamming the loop after the for loop completes
        end
    end
})


local Toggle = MainTab:CreateToggle({
    Name = "Smart Weight",
    CurrentValue = false,
    Flag = "Toggle6",
    Callback = function(Value)
        getgenv().BuyWeight = Value

        if Value then
            task.spawn(function()
                while getgenv().BuyWeight do  
                    -- Ensure leaderstats and Stage exist
                    if not player.leaderstats or not player.leaderstats:FindFirstChild("Stage") then
                        warn("Stage not found in leaderstats!")
                        return
                    end

                    local stage = player.leaderstats.Stage.Value
                    local maxWeight = 21  -- Default max weight for Stage 0

                    -- Define max weight based on the player's stage
                    if stage == 1 then maxWeight = 27
                    elseif stage == 2 then maxWeight = 32
                    elseif stage == 3 then maxWeight = 37
                    elseif stage == 4 then maxWeight = 41
                    elseif stage == 5 then maxWeight = 46
                    elseif stage == 6 then maxWeight = 51
                    elseif stage == 7 then maxWeight = 56
                    elseif stage == 8 then maxWeight = 61
                    elseif stage == 9 then maxWeight = 64
                    elseif stage == 10 then maxWeight = 69
                    elseif stage == 11 then maxWeight = 72
                    elseif stage == 12 then maxWeight = 75
                    elseif stage == 13 then maxWeight = 78
                    elseif stage == 14 then maxWeight = 81
                    elseif stage == 15 then maxWeight = 84
                    elseif stage == 16 then maxWeight = 87
                    elseif stage == 17 then maxWeight = 90
                    elseif stage == 18 then maxWeight = 93
                    elseif stage == 19 then maxWeight = 96
                    elseif stage == 20 then maxWeight = 99
                    elseif stage == 21 then maxWeight = 102
                    elseif stage == 22 then maxWeight = 105
                    elseif stage == 23 then maxWeight = 108
                    elseif stage == 24 then maxWeight = 111
                    elseif stage == 25 then maxWeight = 114
                    elseif stage == 26 then maxWeight = 120
                    elseif stage == 27 then maxWeight = 126
                    elseif stage == 28 then maxWeight = 132
                    elseif stage == 29 then maxWeight = 138
                    elseif stage > 30 then maxWeight = 144 -- Example for high-stage players
                    end

                    -- Buy weights up to maxWeight
                    for i = 2, maxWeight do
                        if not getgenv().BuyWeight then return end

                        print("Attempting to buy weight: ", i)
                        local args = {
                            [1] = {"BuyItem", "Income_Item", "Weight", i}
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.1)
                    end

                    task.wait(1) -- Delay before the next cycle
                end
            end)
        end
    end
})

local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Toggle = MainTab:CreateToggle({
    Name = "Smart DNA",
    CurrentValue = false,
    Flag = "Toggle7",
    Callback = function(Value)
        getgenv().BuyDNA = Value

        if Value then
            task.spawn(function()  -- Runs in a separate thread
                while getgenv().BuyDNA do
                    -- Get player's current stage
                    local stage = player.leaderstats:FindFirstChild("Stage") and player.leaderstats.Stage.Value or 0

                    -- Set max DNA purchase limit based on stage
                    local maxDNA = 12
                    if stage == 1 then maxDNA = 16
                    elseif stage == 2 then maxDNA = 18
                    elseif stage == 3 then maxDNA = 37
                    elseif stage == 4 then maxDNA = 41
                    elseif stage == 5 then maxDNA = 24
                    elseif stage == 6 then maxDNA = 28
                    elseif stage == 7 then maxDNA = 30
                    elseif stage == 8 then maxDNA = 32
                    elseif stage == 9 then maxDNA = 37
                    elseif stage == 10 then maxDNA = 39
                    elseif stage == 11 then maxDNA = 43
                    elseif stage == 12 then maxDNA = 44
                    elseif stage == 13 then maxDNA = 44
                    elseif stage == 14 then maxDNA = 45
                    elseif stage == 15 then maxDNA = 46
                    elseif stage == 16 then maxDNA = 48
                    elseif stage == 17 then maxDNA = 49
                    elseif stage == 18 then maxDNA = 50
                    elseif stage == 19 then maxDNA = 51
                    elseif stage == 20 then maxDNA = 51
                    elseif stage == 21 then maxDNA = 52
                    elseif stage == 22 then maxDNA = 52
                    elseif stage == 23 then maxDNA = 53
                    elseif stage == 24 then maxDNA = 55
                    elseif stage == 25 then maxDNA = 56
                    elseif stage == 26 then maxDNA = 58
                    elseif stage == 27 then maxDNA = 60
                    elseif stage == 28 then maxDNA = 62
                    elseif stage == 29 then maxDNA = 64
                    elseif stage > 30 then maxDNA = 70
                    end

                    -- Loop through and buy DNA up to maxDNA
                    for i = 1, maxDNA do
                        if not getgenv().BuyDNA then return end -- Stops instantly

                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "DNA name",
                                [4] = i
                            }
                        }

                        ReplicatedStorage:WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

-- AUto Equip Weight
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

getgenv().AutoEquip = false
getgenv().SelectedTool = "None"

-- Function to gather all tools from the backpack
local function getToolsList()
    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    local tools = {"None"} -- Add 'None' option
    
    if inventory then
        for _, item in ipairs(inventory:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(tools, item.Name)
            end
        end
    end
    return tools
end

-- Equip selected tool
local function equipTool(selectedTool)
    if not LocalPlayer.Character then return end
    if selectedTool == "None" then return end -- Skip if 'None' is selected
    
    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    
    if inventory then
        local tool = inventory:FindFirstChild(selectedTool)
        if tool and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
        end
    end
end

-- Create dropdown menu
local Dropdown = SetTab:CreateDropdown({ 
   Name = "Auto Equip Item", 
   Options = getToolsList(),
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown3",
   Callback = function(Options)
       getgenv().AutoEquip = true
       getgenv().SelectedTool = Options[1] -- Store the selected tool
       
       task.spawn(function()
           while getgenv().AutoEquip do
               if getgenv().SelectedTool ~= "None" then
                   equipTool(getgenv().SelectedTool)
               end
               task.wait() -- Rechecks every 10 seconds
           end
       end)
   end,
})

-- Refresh the dropdown when the backpack updates
LocalPlayer.Backpack.ChildAdded:Connect(function()
    Dropdown:SetOptions(getToolsList())
end)

LocalPlayer.Backpack.ChildRemoved:Connect(function()
    Dropdown:SetOptions(getToolsList())
end)





local Toggle = SetTab:CreateToggle({
    Name = "Anti AFK KICK",
    CurrentValue = false,
    Flag = "Toggle8",
    Callback = function(Value)
        getgenv().antiafk = Value

        if Value then
            -- Run Anti-AFK logic only once
            local Players = game:GetService("Players")
            local VirtualUser = game:GetService("VirtualUser")

            local GC = getconnections or get_signal_cons
            if GC then
                for i, v in pairs(GC(Players.LocalPlayer.Idled)) do
                    if v.Disable then
                        v:Disable()
                    elseif v.Disconnect then
                        v:Disconnect()
                    end
                end
            else
                Players.LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end

            -- Run a controlled loop with delays
            task.spawn(function()
                while getgenv().antiafk do
                    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(1)
                    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(900) -- Wait before repeating
                end
            end)
        end
    end
})


local Toggle = SetTab:CreateToggle({
    Name = "Auto Clicker Bloodline",
    CurrentValue = false,
    Flag = "Toggle9", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().CLick = Value
        while CLick == true do
                game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                wait(12)
            end
        end,
 })

 local Toggle = SetTab:CreateToggle({
    Name = "Auto Clicker Killstreak",
    CurrentValue = false,
    Flag = "Toggle10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().CLick = Value
        while CLick == true do
                game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                wait(5)
            end
        end,
 })

 local Toggle = SetTab:CreateToggle({
    Name = "Auto Clicker fast",
    CurrentValue = false,
    Flag = "Toggle11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().CLick = Value
        while CLick == true do
                game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                task.wait()
            end
        end,
 })

 local Toggle = SetTab:CreateToggle({
    Name = "White Screen",
    CurrentValue = false,
    Flag = "Toggle12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv()WS = Value
        if WS == true then
            game:GetService("RunService"):Set3dRenderingEnabled(false)
            elseif WS == false then
                game:GetService("RunService"):Set3dRenderingEnabled(true)
        end
    end,
 })

 local ScreenGui = nil  -- Store the ScreenGui so we can toggle it on/off

local Toggle = SetTab:CreateToggle({
    Name = "Black Screen",
    CurrentValue = false,
    Flag = "Toggle13",
    Callback = function(Value)
        if Value then
            -- Create the black screen if it doesn't exist
            if not ScreenGui then
                ScreenGui = Instance.new("ScreenGui")
                local Frame = Instance.new("Frame")

                ScreenGui.Parent = game.CoreGui
                ScreenGui.IgnoreGuiInset = true  

                Frame.Parent = ScreenGui
                Frame.Size = UDim2.new(1, 0, 1, 0)
                Frame.Position = UDim2.new(0, 0, 0, 0)
                Frame.BackgroundColor3 = Color3.new(0, 0, 0)
                Frame.BorderSizePixel = 0  
            end
        else
            -- Remove the black screen if it exists
            if ScreenGui then
                ScreenGui:Destroy()
                ScreenGui = nil
            end
        end
    end,
})

repeat wait() until game:IsLoaded()
wait(2)

-- Create GUI Elements
local ScreenGui = Instance.new("ScreenGui")

local Fps = Instance.new("TextLabel")
local Ping = Instance.new("TextLabel")

-- FPS at the Upper Right (Lowered)
Fps.Name = "Fps"
Fps.BackgroundTransparency = 1.0
Fps.Position = UDim2.new(1, -130, 0, 30) -- Moved down from 5 to 30
Fps.Size = UDim2.new(0, 125, 0, 25)
Fps.Font = Enum.Font.SourceSans
Fps.TextColor3 = Color3.fromRGB(255, 255, 255)
Fps.TextScaled = true
Fps.Text = ""

-- Ping at the Upper Left (Lowered)
Ping.Name = "Ping"
Ping.BackgroundTransparency = 1.0
Ping.Position = UDim2.new(0, 5, 0, 30) -- Moved down from 5 to 30
Ping.Size = UDim2.new(0, 125, 0, 25)
Ping.Font = Enum.Font.SourceSans
Ping.TextColor3 = Color3.fromRGB(253, 253, 253)
Ping.TextScaled = true
Ping.Text = ""

-- Parent AFTER setting properties to avoid "Label"
Fps.Parent = ScreenGui
Ping.Parent = ScreenGui
ScreenGui.Parent = game.CoreGui

-- Toggleable FPS & Ping Display
local RunService = game:GetService("RunService")
getgenv().DisplayStats = false

local function UpdateStats()
    while getgenv().DisplayStats do
        local fpsValue = math.round(1 / RunService.RenderStepped:Wait())
        local pingValue = math.round(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())

        Fps.Text = "FPS: " .. fpsValue
        Ping.Text = "Ping: " .. pingValue

        task.wait(0.5)
    end

    -- Hide text when disabled
    Fps.Text = ""
    Ping.Text = ""
end

-- Toggle UI
local Toggle = SetTab:CreateToggle({ 
    Name = "Show FPS & Ping", 
    CurrentValue = false,
    Flag = "Toggle14", 
    Callback = function(Value)
        getgenv().DisplayStats = Value
        if Value then
            task.spawn(UpdateStats)
        end
    end,
})

-- Toggle for Destroy Everything (Visual Only)
local Toggle = SetTab:CreateToggle({
    Name = "Destroy Everything",
    CurrentValue = false,
    Flag = "Toggle15",
    Callback = function(Value)
        getgenv().DestroyEverything = Value
        if Value then
            startDestroy()
        else
            restoreObjects()
        end
    end,
})

local destroyedObjects = {}

function startDestroy()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") and not obj:IsDescendantOf(game.Players.LocalPlayer.Character) then
            destroyedObjects[obj] = {Transparency = obj.Transparency, Material = obj.Material}
            obj.Transparency = 1
            obj.Material = Enum.Material.SmoothPlastic
        elseif obj:IsA("Decal") or obj:IsA("Texture") then
            destroyedObjects[obj] = true
            obj:Destroy()
        end
    end
end

function restoreObjects()
    for obj, data in pairs(destroyedObjects) do
        if obj and obj.Parent then
            if typeof(data) == "table" then
                obj.Transparency = data.Transparency
                obj.Material = data.Material
            end
        end
    end
    destroyedObjects = {}
end

local player = game.Players.LocalPlayer

local function setTrueInvisibility(state)
    local character = player.Character or player.CharacterAdded:Wait()
    if not character then return end

    for _, v in pairs(character:GetDescendants()) do
        if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
            v.LocalTransparencyModifier = state and 1 or 0 -- Makes parts invisible
            v.CanCollide = not state -- Disables collision
            v.CanTouch = not state
            v.CanQuery = not state
        end
    end

    if character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.Anchored = state -- Prevents server from detecting movement
    end
end

local Toggle = SetTab:CreateToggle({ 
    Name = "TRUE INVISIBILITY", 
    CurrentValue = false,
    Flag = "Toggle16", 
    Callback = function(Value)
        setTrueInvisibility(Value)
    end,
})

local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")

-- Get HumanoidRootPart
local function getRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

local lockedCFrame = nil -- Store the locked position

local Toggle = SetTab:CreateToggle({ 
    Name = "Freeze Position",
    CurrentValue = false,
    Flag = "Toggle17",
    Callback = function(Value)
        local root = getRoot()
        if Value then
            lockedCFrame = root.CFrame -- Save current position
        else
            lockedCFrame = nil
        end
    end,
})

runService.RenderStepped:Connect(function()
    local root = getRoot()
    if lockedCFrame then
        root.CFrame = lockedCFrame -- Lock position
    end
end)

local player = game.Players.LocalPlayer

local function hideCustomNameTag()
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:WaitForChild("Head")

    print("Checking for TitleGui under Head...")
    local titleGui = head:FindFirstChild("TitleGui")
    if titleGui then
        print("TitleGui found!")
        local tlName = titleGui:FindFirstChild("tlName")
        if tlName and tlName:IsA("TextLabel") then
            print("Hiding tlName...")
            tlName.Visible = false
        end

        local tlRank = titleGui:FindFirstChild("tlRank")
        if tlRank and tlRank:IsA("TextLabel") then
            print("Hiding tlRank...")
            tlRank.Visible = false
        end
    else
        print("TitleGui not found under Head")
    end
end

player.CharacterAdded:Connect(hideCustomNameTag)
if player.Character then
    hideCustomNameTag()
end

local Toggle = SetTab:CreateToggle({
    Name = "Hide Info",
    CurrentValue = false,
    Flag = "Toggle18",
    Callback = function(Value)
        if Value then
            hideCustomNameTag()
        else
            local character = player.Character or player.CharacterAdded:Wait()
            local head = character:WaitForChild("Head")
            local titleGui = head:FindFirstChild("TitleGui")
            if titleGui then
                local tlName = titleGui:FindFirstChild("tlName")
                if tlName and tlName:IsA("TextLabel") then
                    tlName.Visible = true
                end

                local tlRank = titleGui:FindFirstChild("tlRank")
                if tlRank and tlRank:IsA("TextLabel") then
                    tlRank.Visible = true
                end
            end
        end
    end,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local blacklist = {"Athena", "Cronus", "Hades", "Hercules", "Poseidon", "Zeus", "Ares", "Fist","Foot"}

getgenv().AutoEquipUnequip = false

local function equipTools()
    if not LocalPlayer.Character then return end -- Prevents the nil error

    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    if inventory then
        for _, item in ipairs(inventory:GetChildren()) do
            -- Check if the item is a tool and not in the blacklist
            if item:IsA("Tool") and not table.find(blacklist, item.Name) then
                -- Equip the tool
                LocalPlayer.Character:WaitForChild("Humanoid"):EquipTool(item)
            end
        end
    end
end

local function unequipTools()
    if not LocalPlayer.Character then return end -- Prevents the nil error

    local character = LocalPlayer.Character
    for _, item in ipairs(character:GetChildren()) do
        -- Check if the item is a tool and not in the blacklist
        if item:IsA("Tool") and not table.find(blacklist, item.Name) then
            -- Unequip the tool (move it back to the backpack)
            item.Parent = LocalPlayer:FindFirstChildOfClass("Backpack")
        end
    end
end

local Toggle = SetTab:CreateToggle({
    Name = "Auto Equip/Unequip Weight",
    CurrentValue = false,
    Flag = "Toggle19",
    Callback = function(Value)
        getgenv().AutoEquipUnequip = Value

        -- Start or stop the auto-equip/unequip loop
        while AutoEquipUnequip do
            equipTools() -- Equip all non-blacklisted tools
            task.wait(15) -- Wait for 2 seconds (adjust as needed)
            unequipTools() -- Unequip all non-blacklisted tools
            task.wait() -- Wait for 2 seconds (adjust as needed)
        end
    end,
})




local Button = SetTab:CreateButton({
    Name = "Click For a Surprise",
    Callback = function()
        local player = game.Players.LocalPlayer
        local starterGui = game:GetService("StarterGui")
        
        -- Display fake ban message
        starterGui:SetCore("SendNotification", {
            Title = "Surprise!!",
            Text = "The Developers know\nWhat you're doing!",
            Duration = 3
        })
        
        -- Wait 3 seconds, then change the message
        task.wait(2)

        starterGui:SetCore("SendNotification", {
            Title = "BANNING INCOMING",
            Text = "3",
            Duration = 1.1
        })

        task.wait(1.2)

        starterGui:SetCore("SendNotification", {
            Title = "BANNING INCOMING",
            Text = "2",
            Duration = 1.1
        })

        task.wait(1.2)

        starterGui:SetCore("SendNotification", {
            Title = "BANNING INCOMING",
            Text = "1",
            Duration = 1.1
        })

        -- Kick the player after showing the fake ban
        task.wait(1) -- Give a slight delay before kicking
        player:Kick("YOU HAVE BEEN BANNED! EXPLOITS DETECTED!")
    end,
})

local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer

-- Function to get the player's HumanoidRootPart (after respawn)
local function getHumanoidRootPart()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- Function to tween the player
local function tweenToPosition(destinationCFrame, duration)
    local humanoidRootPart = getHumanoidRootPart()
    if humanoidRootPart then
        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local goal = {CFrame = destinationCFrame}
        local tween = TweenService:Create(humanoidRootPart, tweenInfo, goal)
        tween:Play()
    end
end

local lobbyCFrame = CFrame.new(-35.8950806, 618.64978, 1857.83167)
local lobbyLooping = false
local teleportTask

local Dropdown = BloodTab:CreateDropdown({
    Name = "Select Island",
    Options = {
        "None", "Lobby", "[1] Hercules", "[2] Ares", "[3] Poseidon", "[4] Hades", "[5] Athena", "[6] Zeus",
        "[7] Cronus", "[8] Robots", "[9] Bugs", "[10] Cyber", "[11] Divinities", "[12] Egyptians",
        "[13] Hollowed", "[14] The Trial", "[15] The End"
    },
    CurrentOption = "None",
    MultipleOptions = false,
    Flag = "Dropdown4",
    Callback = function(Options)
        local selectedOption = Options[1]

        -- Stop any running teleport loop
        lobbyLooping = false
        if teleportTask then
            task.cancel(teleportTask)
        end

        -- If "Lobby" is chosen, start a looping teleport
        if selectedOption == "Lobby" then
            lobbyLooping = true
            teleportTask = task.spawn(function()
                while lobbyLooping do
                    tweenToPosition(lobbyCFrame, 0.5)
                    task.wait(5)
                end
            end)
        else
            -- Define teleport positions
            local locations = {
                ["[1] Hercules"] = CFrame.new(2147, -61, 1881),
                ["[2] Ares"] = CFrame.new(5218.5, -60.5, 1713.5),
                ["[3] Poseidon"] = CFrame.new(7903.5, -60.5, 1881),
                ["[4] Hades"] = CFrame.new(10063.6484, -39.5004883, 1881.50012),
                ["[5] Athena"] = CFrame.new(12438.1592, -19.859026, 1580.67932),
                ["[6] Zeus"] = CFrame.new(15797, -58.5, 1893.5),
                ["[7] Cronus"] = CFrame.new(18437, -61, 1893.5),
                ["[8] Robots"] = CFrame.new(20560, -56.9952087, 2152),
                ["[9] Bugs"] = CFrame.new(23200.7305, -56.992157, 2152.69604),
                ["[10] Cyber"] = CFrame.new(25907, -60.9952087, 1708.5),
                ["[11] Divinities"] = CFrame.new(28547, -60.9952087, 1708.5),
                ["[12] Egyptians"] = CFrame.new(31187, -60.9952087, 1580.99988),
                ["[13] Hollowed"] = CFrame.new(33787.8477, -60.9821472, 2181.17993),
                ["[14] The Trial"] = CFrame.new(36832, -60.9952087, 1880.99988),
                ["[15] The End"] = CFrame.new(39601, -60.9952087, 1766)
            }

            -- Move the player if the option exists
            if locations[selectedOption] then
                tweenToPosition(locations[selectedOption], 0.8)
            end
        end
    end,
})

-- 🔥 Reconnect after player respawns to fix tweening issue
player.CharacterAdded:Connect(function()
    wait(1) -- Wait for the new character to load
    if lobbyLooping then
        tweenToPosition(lobbyCFrame, 0.5)
    end
end)

local player = game.Players.LocalPlayer
local tweenService = game:GetService("TweenService")
local starterGui = game:GetService("StarterGui")

local attacking = false
local activeNPCs = {}
local humanoidRootPart

local function onCharacterAdded(character)
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
    if humanoidRootPart then
        print("✅ HumanoidRootPart found after respawn.")
    else
        warn("❌ HumanoidRootPart not found after respawn.")
    end
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end

local npcData = {
    {name = "LIEUTENANT", flag = "Toggle21", positions = {
        CFrame.new(1750, -57.5004883, 1882.00024),
        CFrame.new(2442, -57.5004883, 1870.00024)
    }},
    {name = "KNIGHT", flag = "Toggle22", positions = {
        CFrame.new(5116, -57.5004883, 1850.00024),
        CFrame.new(5006, -57.5004883, 1670.00024)
    }},
    {name = "BARON", flag = "Toggle23", positions = {
        CFrame.new(7258.40039, -57.5004883, 1694.07031),
        CFrame.new(7580, -57.5004883, 1902.0802)
    }},
    {name = "COUNT", flag = "Toggle24", positions = {
        CFrame.new(10069.1484, -57.5004883, 2283.63013),
        CFrame.new(9942.18848, -57.800293, 1490.21021)
    }},
    {name = "MARQUIS", flag = "Toggle25", positions = {
        CFrame.new(12301.7012, -57.5004883, 1887.00024),
        CFrame.new(12879.7617, -57.5004883, 1642.82019)
    }},
    {name = "GRAND DUKE", flag = "Toggle26", positions = {
        CFrame.new(15551.2803, -54.5004883, 2091.14014),
        CFrame.new(15097, -54.5004883, 1925.00024)
    }},
    {name = "ARCH DUKE", flag = "Toggle27", positions = {
        CFrame.new(18350.7109, -57.6010742, 1898.51025),
        CFrame.new(17671.1699, -57.6547852, 1983.44019)
    }},
    {name = "DEMI DEITY", flag = "Toggle28", positions = {
        CFrame.new(20583.1621, -57.6010742, 1682.76025),
        CFrame.new(20628, -57.6547852, 2078.58008)
    }},
    {name = "ELITE DEITY", flag = "Toggle29", positions = {
        CFrame.new(23003.7715, -57.6010742, 1751.23022),
        CFrame.new(23102.6309, -57.6547852, 1921.6499)
    }},
    {name = "MYTHIC DEITY", flag = "Toggle30", positions = {
        CFrame.new(25832.8418, -57.6010742, 1829.26013),
        CFrame.new(25604.8125, -57.6547852, 2188.09009)
    }},
}  

local function StartAttacking()
    while attacking do
        local character = player.Character
        if not character then return end
        local footTool = character:FindFirstChild("Foot") or player.Backpack:FindFirstChild("Foot")
        if footTool then
            footTool.Parent = character
            task.wait(0.2)
            footTool:Activate()
        else
            warn("⚠ 'Foot' not found! Using fallback mouse click.")
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, true, game, 1)
        end
        task.wait(0.3)
    end
end

local function MoveAndAttack()
    task.spawn(StartAttacking)
    
    while attacking do
        local positions = {}
        for _, npc in ipairs(activeNPCs) do
            for _, pos in ipairs(npc.positions) do
                table.insert(positions, pos)
            end
        end
        
        for _, pos in ipairs(positions) do
            if not attacking then return end
            humanoidRootPart.CFrame = pos
            task.wait(1.5)
        end
    end
end

for _, npc in ipairs(npcData) do
    local success, err = pcall(function()
        BloodTab:CreateToggle({
            Name = npc.name,
            CurrentValue = false,
            Flag = npc.flag,
            Callback = function(Value)
                if Value then
                    if #activeNPCs >= 2 then
                        starterGui:SetCore("SendNotification", {
                            Title = "Bloodline Notification",
                            Text = "Only 2 Maximum Toggles may be turned on",
                            Duration = 5
                        })
                        return
                    end
                    table.insert(activeNPCs, npc)
                    attacking = true
                    MoveAndAttack()
                else
                    for i, active in ipairs(activeNPCs) do
                        if active.name == npc.name then
                            table.remove(activeNPCs, i)
                            break
                        end
                    end
                    if #activeNPCs == 0 then
                        attacking = false
                    end
                end
            end,
        })
    end)

    if not success then
        warn("⚠ Error creating toggle for " .. npc.name .. ": " .. err)
    end
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Dropdown

-- Function to teleport to a chosen player
local function TeleportToPlayer(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        end
    end
end

-- Function to update dropdown options
local function UpdateDropdown()
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then  -- Exclude local player
            table.insert(playerNames, player.Name)
        end
    end

    if Dropdown then
        Dropdown:SetOptions(playerNames)  -- Update existing dropdown options
    else
        Dropdown = PlayerTab:CreateDropdown({
            Name = "Teleport to Player",
            Options = playerNames,
            CurrentOption = {},
            MultipleOptions = false,
            Flag = "Dropdown5",
            Callback = function(Options)
                if Options[1] then
                    TeleportToPlayer(Options[1])
                end
            end,
        })
    end
end


Players.PlayerAdded:Connect(UpdateDropdown)
Players.PlayerRemoving:Connect(UpdateDropdown)

-- Initial update
UpdateDropdown()


local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Death Immunity Zone Position
local ImmunityZone = Vector3.new(-634.5390625, -53.9104830932617, 1859.409912109371)
local ImmunityRadius = 20 -- Adjust if needed

-- Function to Check if a Player is in the Immunity Zone
local function isInImmunityZone(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local distance = (player.Character.HumanoidRootPart.Position - ImmunityZone).Magnitude
        return distance <= ImmunityRadius
    end
    return false
end

-- Function to Equip "Foot"
local function equipFoot()
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if backpack then
        local footTool = backpack:FindFirstChild("Foot")
        if footTool then
            LocalPlayer.Character.Humanoid:EquipTool(footTool)
        end
    end
end

-- Function to Get Player's Stage Level
local function getStage(player)
    if player and player:FindFirstChild("leaderstats") then
        local stage = player.leaderstats:FindFirstChild("Stage")
        return stage and stage.Value or 0
    end
    return 0
end

-- Auto Attack & Teleport Loop
local function attackAndTeleportLoop()
    while getgenv().AutoFarm do
        -- Equip "Foot"
        equipFoot()

        -- Auto Click M1
        VirtualUser:ClickButton1(Vector2.new(9e9, 9e9))

        -- Find and Teleport to a Weaker Player
        local myStage = getStage(LocalPlayer)
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local targetStage = getStage(player)

                if targetStage < myStage and not isInImmunityZone(player) then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
                    task.wait(3) -- Wait 3 seconds before teleporting to another player
                    break
                end
            end
        end

        task.wait(0.1) -- Adjust attack speed
    end
end

-- Single Toggle for Auto Farm (Attack + Teleport)
local ToggleAutoFarm = PlayerTab:CreateToggle({
    Name = "Auto Attack & Teleport",
    CurrentValue = false,
    Flag = "Toggle20",
    Callback = function(Value)
        getgenv().AutoFarm = Value
        if Value then
            task.spawn(attackAndTeleportLoop) -- Start the loop
        end
    end,
})






--TryTab

local lobbyCFrame = CFrame.new(-35.8950806, 618.64978, 1857.83167)
local lobbyLooping = false
local teleportTask

local Dropdown = TryTab:CreateDropdown({
    Name = "Select Island",
    Options = {
        "None", "Lobby", "[1] Hercules", "[2] Ares", "[3] Poseidon", "[4] Hades", "[5] Athena", "[6] Zeus",
        "[7] Cronus", "[8] Robots", "[9] Bugs", "[10] Cyber", "[11] Divinities", "[12] Egyptians",
        "[13] Hollowed", "[14] The Trial", "[15] The End"
    },
    CurrentOption = "None",
    MultipleOptions = false,
    Flag = "Dropdown6",
    Callback = function(Options)
        local selectedOption = Options[1]

        -- Stop any running teleport loop
        lobbyLooping = false
        if teleportTask then
            task.cancel(teleportTask)
        end

        -- If "Lobby" is chosen, start a looping teleport
        if selectedOption == "Lobby" then
            lobbyLooping = true
            teleportTask = task.spawn(function()
                while lobbyLooping do
                    tweenToPosition(lobbyCFrame, 0.5)
                    task.wait(5)
                end
            end)
        else
            -- Define teleport positions
            local locations = {
                ["[1] Hercules"] = CFrame.new(1272.44,94.00,1851.11),
                ["[2] Ares"] = CFrame.new(4055.03,94.01,1815.06),
                ["[3] Poseidon"] = CFrame.new(6665.31,94.01,1902.04),
                ["[4] Hades"] = CFrame.new(9393.84, 94.01,1875.97),
                ["[5] Athena"] = CFrame.new(11798.42,94.01,1875.52),
                ["[6] Zeus"] = CFrame.new(14596.24,94.01,1904.77),
                ["[7] Cronus"] = CFrame.new(17247.50,94.01,1848.54),
                ["[8] Robots"] = CFrame.new(19979.43,94.01,1889.56),
                ["[9] Bugs"] = CFrame.new(22494.12,94.01,1858.39),
                ["[10] Cyber"] = CFrame.new(25107.67,94.01,1889.34),
                ["[11] Divinities"] = CFrame.new(27536.45,94.01,1815.89),
                ["[12] Egyptians"] = CFrame.new(30026.91,94.01,1872.04),
                ["[13] Hollowed"] = CFrame.new(32671.49, 94.01, 1852.79),
                ["[14] The Trial"] = CFrame.new(35397.16,94.01,1898.30),
                ["[15] The End"] = CFrame.new(37852.44,94.01,1875.86)
            }

            -- Move the player if the option exists
            if locations[selectedOption] then
                tweenToPosition(locations[selectedOption], 0.8)
            end
        end
    end,
})


local moving = false
local selectedOption = "Choose Option"
local humanoidRootPart = nil

-- Function to get the current HumanoidRootPart with safety checks
local function getHumanoidRootPart()
    local character = game.Players.LocalPlayer.Character
    if character then
        return character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")
    end
    return nil
end

-- Function to equip Foot from backpack
local function equipFoot()
    local backpack = game:GetService("Players").LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return end
    
    for _, item in ipairs(backpack:GetChildren()) do
        if item.Name:lower():find("foot") and item:IsA("Tool") then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(item)
            break
        end
    end
end

-- Function to simulate M1 click
local function clickM1()
    local virtualInput = game:GetService("VirtualInputManager")
    virtualInput:SendMouseButtonEvent(0, 0, 0, true, game, 1)
    task.wait(0.1)
    virtualInput:SendMouseButtonEvent(0, 0, 0, false, game, 1)
end

-- Function to handle movement and M1 clicking
local function startMovement(option, positions)
    moving = true
    equipFoot() -- Equip foot when movement starts
    
    task.spawn(function()
        while moving do
            humanoidRootPart = getHumanoidRootPart()
            if not humanoidRootPart then
                -- Wait for character to respawn
                game.Players.LocalPlayer.CharacterAdded:Wait()
                humanoidRootPart = getHumanoidRootPart()
                equipFoot() -- Re-equip foot after respawn
            end
            
            if option == "Devil" then
                humanoidRootPart.CFrame = positions.Devil1
                clickM1()
                task.wait(3)
                humanoidRootPart.CFrame = positions.Devil2
                clickM1()
                task.wait(3)
            elseif option == "Angel" then
                humanoidRootPart.CFrame = positions.Angel1
                clickM1()
                task.wait(3)
                humanoidRootPart.CFrame = positions.Angel2
                clickM1()
                task.wait(3)
            elseif option == "Middle" then
                humanoidRootPart.CFrame = positions.Middle
                clickM1()
                task.wait(3)
            end
        end
    end)
end

-- Initialize HumanoidRootPart reference
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

-- Get initial reference
if game.Players.LocalPlayer.Character then
    humanoidRootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
end

-- Hercules Dropdown
local LieutenantDropdown = TryTab:CreateDropdown({
    Name = "1st Bloodline [Hercules]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown7",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(1750, -57.5004883, 1882.00024),
                Devil2 = CFrame.new(2442, -57.5004883, 1870.00024),
                Angel1 = CFrame.new(2122.85, 4.83, 2153.45),
                Angel2 = CFrame.new(2135.10, 4.83, 1618.96),
                Middle = CFrame.new(2142, 72.96, 1886.86)
            })
        end
    end,
})

-- Ares Dropdown
local AresDropdown = TryTab:CreateDropdown({
    Name = "2nd Bloodline[Ares]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown8",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(5116, -57.5004883, 1850.00024),
                Devil2 = CFrame.new(5006, -57.5004883, 1670.00024),
                Angel1 = CFrame.new(4480.53, -66.96, 1873.10),
                Angel2 = CFrame.new(4619.06, 67.86, 2191.77),
                Middle = CFrame.new(4790.08, 72.96, 1883.74)
            })
        end
    end,
})

-- Poseidon Dropdown
local PoseidonDropdown = TryTab:CreateDropdown({
    Name = "3rd Bloodline[Poseidon]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown9",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(7258.40039, -57.5004883, 1694.07031),
                Devil2 = CFrame.new(7580, -57.5004883, 1902.0802),
                Angel1 = CFrame.new(7641.90, 113.07, 1713.49),
                Angel2 = CFrame.new(7027.47, 113.07, 1899.24),
                Middle = CFrame.new(7423.88, 116.17, 1894.63)
            })
        end
    end,
})

-- Hades Dropdown
local HadesDropdown = TryTab:CreateDropdown({
    Name = "4th Bloodline[Hades]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown1.",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(10069.1484, -57.5004883, 2283.63013),
                Devil2 = CFrame.new(9942.18848, -57.800293, 1490.21021),
                Angel1 = CFrame.new(9622.37, 112.30, 1882.91),
                Angel2 = CFrame.new(10496.92, 112.60, 1875.61),
                Middle = CFrame.new(10077.96, 130.46, 1889.09)
            })
        end
    end,
})

-- Athena Dropdown
local AthenaDropdown = TryTab:CreateDropdown({
    Name = "5th Bloodline[Athena]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown11",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(12301.7012, -57.5004883, 1887.00024),
                Devil2 = CFrame.new(12879.7617, -57.5004883, 1642.82019),
                Angel1 = CFrame.new(13082.91, 155.06, 1796.23),
                Angel2 = CFrame.new(12649.79, 155.66, 2171.43),
                Middle = CFrame.new(12711.25, 167.06, 1837.08)
            })
        end
    end,
})

-- Zeus Dropdown
local ZeusDropdown = TryTab:CreateDropdown({
    Name = "6th Bloodline[Zeus]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown12",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(15551.2803, -54.5004883, 2091.14014),
                Devil2 = CFrame.new(15097, -54.5004883, 1925.00024),
                Angel1 = CFrame.new(15654.08, 158.06, 1810.93),
                Angel2 = CFrame.new(15173.99, 158.06, 2181.33),
                Middle = CFrame.new(15343.09, 161.06, 1847.09)
            })
        end
    end,
})

-- Cronus Dropdown
local CronusDropdown = TryTab:CreateDropdown({
    Name = "7th Bloodline[Cronus]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown13",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(18350.7109, -57.6010742, 1898.51025),
                Devil2 = CFrame.new(17671.1699, -57.6547852, 1983.44019),
                Angel1 = CFrame.new(17862.35, 255.39, 1476.00),
                Angel2 = CFrame.new(17862.35, 255.39, 1476.00),
                Middle = CFrame.new(17967.72, 231.39, 1872.65)
            })
        end
    end,
})

-- Robots Dropdown
local BotsDropdown = TryTab:CreateDropdown({
    Name = "8th Bloodline[Robots]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown14",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(20583.1621, -57.6010742, 1682.76025),
                Devil2 = CFrame.new(20628, -57.6547852, 2078.58008),
                Angel1 = CFrame.new(20436.26, 301.16, 1946.15),
                Angel2 = CFrame.new(20904.26, 308.96, 1933.62),
                Middle = CFrame.new(20655.21, 227.00, 1896.29)
            })
        end
    end,
})

-- Bugs Dropdown
local BugsDropdown = TryTab:CreateDropdown({
    Name = "9th Bloodline[Bugs]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown15",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(23318.71, 692.53, 2022.52),
                Devil2 = CFrame.new(23318.71, 692.53, 2022.52),
                Angel1 = CFrame.new(23318.71, 692.53, 2022.52),
                Angel2 = CFrame.new(23318.71, 692.53, 2022.52),
                Middle = CFrame.new(23318.71, 692.53, 2022.52)
            })
        end
    end,
})

-- Cyber Dropdown
local CyberDropdown = TryTab:CreateDropdown({
    Name = "10th Bloodline[Cyber]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown16",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(25971.24, 708.20, 1999.64),
                Devil2 = CFrame.new(25971.24, 708.20, 1999.64),
                Angel1 = CFrame.new(25971.24, 708.20, 1999.64),
                Angel2 = CFrame.new(25971.24, 708.20, 1999.64),
                Middle = CFrame.new(25971.24, 708.20, 1999.64)
            })
        end
    end,
})

local CyberDropdown = TryTab:CreateDropdown({
    Name = "11th Bloodline[Divinities]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown17",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Devil2 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Angel1 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Angel2 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Middle = CFrame.new(28713.60,1434.99,2041.96
            )
            })
        end
    end,
})

local CyberDropdown = TryTab:CreateDropdown({
    Name = "12th Bloodline[Egyptians]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown18",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Devil2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Middle = CFrame.new(36425.56,985.87,2029.98
            )
            })
        end
    end,
})

local HollowedDropdown = TryTab:CreateDropdown({
    Name = "13th Bloodline[Hollowed]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown19",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Devil2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Middle = CFrame.new(36425.56,985.87,2029.98
            )
            })
        end
    end,
})

local TTrialDropdown = TryTab:CreateDropdown({
    Name = "14th Bloodline[Trial]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown20",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Devil2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Middle = CFrame.new(36425.56,985.87,2029.98
            )
            })
        end
    end,
})





























-- Paragraph:
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = MiscTab:CreateParagraph({Title = "I LOVE HIM", Content = "I LOVE HIM"})
local Paragraph = BloodTab:CreateParagraph({Title = "OPTIONS", Content = "You can Choose 2 Options."})
local Paragraph = TryTab:CreateParagraph({Title = "OPTIONS", Content = "Same as OLD VERSION But can choose multiple. With Race."})

print("SCRIPT HAS LOADED!")
